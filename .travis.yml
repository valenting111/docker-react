# Tell  travis that all commands should be ran with super user permission
sudo: required

language: generic 

# Tell travis which additional software it needs for the project
services:
  - docker

# Series of commands that are executed before our test are ran
before_install:
  #Don't forget to tag the image built so we can run it later with the same name tag
  - docker build -t valentingourmet/docker-react -f Dockerfile.dev .

#All the commands needed to run our test suite 
# If any commands returns a status code != 0, it means the build failed
script:
  # Note: npm run test doesn't exit automatically by default, so we need -e CI=true to make it so
  - docker run -e CI=true valentingourmet/docker-react npm run test

#Tell Travis how to deploy our application in AWS
deploy:
  # Travis CI knows some providers by default (like Elastic BeanStalk)
  provider: elasticbeanstalk
  # Where the environment for our app was created in AWS
  region: "us-east-2"

  #Name of our app in AWS
  app: "docker-react"

  #Environment name (name of the AWS application created)
  env: "Dockerreact-env"
  #Travis will zip all our github files to a S3 bucket (= hard drive on AWS)
  bucket_name: "elasticbeanstalk-us-east-2-724630146900"

  bucket_path: "docker-react"
  #only deploy when the code is pushed to the master branch
  on:
    branch: master


  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY